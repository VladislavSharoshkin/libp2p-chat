//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Blocks = newBlocksTable("", "blocks", "")

type blocksTable struct {
	sqlite.Table

	//Columns
	ID   sqlite.ColumnInteger
	From sqlite.ColumnString
	Sign sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type BlocksTable struct {
	blocksTable

	EXCLUDED blocksTable
}

// AS creates new BlocksTable with assigned alias
func (a BlocksTable) AS(alias string) *BlocksTable {
	return newBlocksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlocksTable with assigned schema name
func (a BlocksTable) FromSchema(schemaName string) *BlocksTable {
	return newBlocksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlocksTable with assigned table prefix
func (a BlocksTable) WithPrefix(prefix string) *BlocksTable {
	return newBlocksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlocksTable with assigned table suffix
func (a BlocksTable) WithSuffix(suffix string) *BlocksTable {
	return newBlocksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlocksTable(schemaName, tableName, alias string) *BlocksTable {
	return &BlocksTable{
		blocksTable: newBlocksTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newBlocksTableImpl("", "excluded", ""),
	}
}

func newBlocksTableImpl(schemaName, tableName, alias string) blocksTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		FromColumn     = sqlite.StringColumn("from")
		SignColumn     = sqlite.StringColumn("sign")
		allColumns     = sqlite.ColumnList{IDColumn, FromColumn, SignColumn}
		mutableColumns = sqlite.ColumnList{FromColumn, SignColumn}
	)

	return blocksTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		From: FromColumn,
		Sign: SignColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
